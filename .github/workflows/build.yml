name: Android CI Build

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

jobs:
  build-android:
    runs-on: ubuntu-latest

    steps:
      # 步骤 1: 检出代码和所有子模块
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      # 步骤 2: 安装 NDK 并设置 ANDROID_NDK_HOME 环境变量
      # 这一步会成功执行，并在后续步骤中提供 ${{ env.ANDROID_NDK_HOME }} 变量
      - name: Setup Android NDK
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25b

      # 步骤 3: 创建构建目录
      - name: Create build directory
        run: mkdir build

      # 步骤 4: 运行 CMake 配置 (关键修复)
      # - 'env:' 块确保 ANDROID_NDK_HOME 在这个步骤的 shell 环境中可用。
      # - 在 'run:' 脚本中，我们使用 $ANDROID_NDK_HOME (标准的 shell 语法) 来引用这个变量。
      #   这比 ${{...}} 语法在多行脚本中更可靠。
      - name: Configure CMake
        working-directory: build
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        run: |
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE="$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake" \
            -DANDROID_NDK="$ANDROID_NDK_HOME" \
            -DANDROID_ABI="arm64-v8a" \
            -DANDROID_PLATFORM=android-30 \
            -DANDROID=1

      # 步骤 5: 编译项目
      - name: Build with Make
        working-directory: build
        run: make -j$(nproc)

      # 步骤 6: 上传构建产物 libstackplz.so
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: libstackplz-arm64-v8a
          path: build/libstackplz.so
