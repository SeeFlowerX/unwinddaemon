# GitHub Actions Workflow for building unwinddaemon for multiple Android versions
# 文件路径: .github/workflows/build.yml

name: Android CI Build

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

jobs:
  build-android:
    # 使用最新的 Ubuntu 虚拟机运行
    runs-on: ubuntu-latest

    # --- 关键改动：使用 Strategy Matrix ---
    # 定义一个构建矩阵。GitHub Actions 会为矩阵中的每个条目启动一个并行的 job。
    strategy:
      fail-fast: false # 即使一个 job 失败，也继续运行其他 job
      matrix:
        # 'include' 允许我们精确定义每个 job 的变量组合
        include:
          # 第一个构建任务：针对 Android 11+ (API 30)
          - platform_api: 'android-30'
            output_name: 'libstackplz.so'
            artifact_name: 'libstackplz-api30'

          # 第二个构建任务：针对 Android 10 (API 29)
          - platform_api: 'android-29'
            output_name: 'libstackplz10.so'
            artifact_name: 'libstackplz-api29'
            
    steps:
      # 步骤 1: 检出代码和所有子模块
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      # 步骤 2: 安装 NDK 并设置 ANDROID_NDK_HOME 环境变量
      - name: Setup Android NDK
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25b

      # 步骤 3: 创建构建目录
      - name: Create build directory
        run: mkdir build

      # 步骤 4: 运行 CMake 配置
      # 使用 ${{ matrix.platform_api }} 从矩阵中获取平台版本
      - name: Configure CMake for ${{ matrix.platform_api }}
        working-directory: build
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        run: |
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE="$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake" \
            -DANDROID_NDK="$ANDROID_NDK_HOME" \
            -DANDROID_ABI="arm64-v8a" \
            -DANDROID_PLATFORM=${{ matrix.platform_api }} \
            -DANDROID=1

      # 步骤 5: 编译项目
      - name: Build with Make
        working-directory: build
        run: make -j$(nproc)

      # 步骤 6: 重命名产物 (如果需要)
      # CMake 默认生成 libstackplz.so。对于 API 29 的构建，我们需要将其重命名为 libstackplz10.so
      - name: Rename Output Library (if necessary)
        # 仅当矩阵中定义的 output_name 不是默认名时才执行此步骤
        if: matrix.output_name != 'libstackplz.so'
        run: mv build/libstackplz.so build/${{ matrix.output_name }}
        
      # 步骤 7: 上传构建产物
      # 使用 ${{ matrix.artifact_name }} 和 ${{ matrix.output_name }} 从矩阵中获取动态名称和路径
      - name: Upload Artifact (${{ matrix.artifact_name }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: build/${{ matrix.output_name }}
