# GitHub Actions Workflow for building the stackplz/unwinddaemon project
# 文件路径: .github/workflows/build.yml

name: Android CI Build

# 触发工作流的事件
on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

jobs:
  build-android:
    # 使用最新的 Ubuntu 虚拟机运行
    runs-on: ubuntu-latest

    steps:
      # 步骤 1: 检出代码
      # submodules: 'recursive' 会自动初始化并拉取所有子模块
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      # 步骤 2: 设置 Android NDK
      # 使用 nttld/setup-ndk action 下载和配置 NDK r25b
      # 它会自动设置 ANDROID_NDK_HOME 环境变量，供后续步骤使用
      - name: Setup Android NDK
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25b

      # 步骤 3: 创建构建目录
      - name: Create build directory
        run: mkdir build

      # 步骤 4: 运行 CMake 配置 (已修复)
      # - 使用 'working-directory' 来指定命令的执行目录
      # - 正确使用 ${{ env.ANDROID_NDK_HOME }} 来引用 NDK 路径
      # - 所有参数都放在一个'run'块中，避免语法错误
      - name: Configure CMake
        working-directory: build
        run: >
          cmake 
          -DCMAKE_TOOLCHAIN_FILE=${{ env.ANDROID_NDK_HOME }}/build/cmake/android.toolchain.cmake
          -DANDROID_NDK=${{ env.ANDROID_NDK_HOME }}
          -DANDROID_ABI="arm64-v8a"
          -DANDROID_PLATFORM=android-30
          -DANDROID=1
          ..

      # 步骤 5: 编译项目
      # - 'make -j$(nproc)' 会使用所有可用的 CPU 核心并行编译，以加快速度
      - name: Build with Make
        working-directory: build
        run: make -j$(nproc)

      # 步骤 6: 上传构建产物 (已优化)
      # - 根据 CMakeLists.txt，项目名为 stackplz，产物为 libstackplz.so
      # - 我们将这个核心产物上传
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: libstackplz-arm64-v8a
          path: build/libstackplz.so
